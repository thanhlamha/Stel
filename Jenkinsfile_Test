pipeline {
    agent any

    environment {
        PATH = "C:\\Program Files\\nodejs\\;D:\\chromedriver-win64\\chromedriver-win64;%PATH%;C:\\Users\\STEL\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;${env.PATH}"
    }

    stages {
        stage('Checkout dev repo and start server') {
            steps {
                // Clone the dev repository from GitLab
                dir('dev_repo') {
                    checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '9a0003e4-8da5-4a72-ab68-bdad98022144', url: 'https://gitlab.com/thanhlamha/login-app-react-hooks.git']]])

                    // Install dependencies and start server
                    bat 'npm install'
                    bat 'start /B npm start'
                }
            }
        }

        stage('Checkout test repo') {
            steps {
                // Clone the test repository from GitHub
                dir('test_repo') {
                    checkout([$class: 'GitSCM', branches: [[name: 'main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '7310a3eb-f60e-4df0-8819-49b444ae99e5', url: 'https://github.com/thanhlamha/Stel.git']]])

                    // Fetch all branches and checkout the specified one
                    bat "git fetch --all"
                    bat "git checkout ${params.BRANCH_NAME}"
                }
            }
        }

        stage('Run tests') {
            steps {
                script {
                    // Get the selected test cases
                    def selectedTestCases = params.TAGS.split(',')
                    def includeOptions = selectedTestCases.collect { "--include ${it}" }.join(' ')
                    def excludeOptions = "--exclude BLOCK-* --exclude FixAT"
                    def robotCommand = "robot --outputdir results ${includeOptions} ${excludeOptions} test_repo\\tests\\"
                    echo "Running command: ${robotCommand}"
                    bat robotCommand
                }
            }
        }

    stage('Cleanup') {
        steps {
            echo 'Cleaning up after tests'

            // Remove dev_repo directory if it exists
            script {
                def devRepoDir = new File("${env.WORKSPACE}/dev_repo")
                if (devRepoDir.exists()) {
                    echo "Deleting dev_repo directory"
                    deleteDir(path: 'dev_repo')
                } else {
                    echo "dev_repo directory does not exist"
                }
            }

            // Remove test_repo directory if it exists
            script {
                def testRepoDir = new File("${env.WORKSPACE}/test_repo")
                if (testRepoDir.exists()) {
                    echo "Deleting test_repo directory"
                    deleteDir(path: 'test_repo')
                } else {
                    echo "test_repo directory does not exist"
                }
            }

            // Add any additional cleanup steps as needed
        }
    }

    }

    post {
        success {
            echo 'Pipeline completed successfully'
            // Additional actions if needed upon success
        }

        failure {
            echo 'Pipeline completed with failure'
            // Additional actions if needed upon failure
        }

        always {
            echo 'Pipeline completed'
            // Always execute cleanup actions
        }
    }
}
