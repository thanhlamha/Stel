pipeline {
    agent any

    // parameters {
    //     // choice(name: 'TAGS', choices: ['Login', 'BLOCK'], description: 'Choose your domain')
    // }
    
    environment {
        // Ensure the PATH includes the directory where ChromeDriver and other binaries are installed
        PATH = "${env.PATH}:/usr/local/bin:/usr/bin:/opt/google/chrome"
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: '7310a3eb-f60e-4df0-8819-49b444ae99e5', url: 'https://github.com/thanhlamha/Stel.git'
            }
        }
            
        stage('Install dependencies') {
            steps {
                // Create a virtual environment
                sh 'python3 -m venv venv'
                // Install dependencies within the virtual environment
                sh './venv/bin/pip install -r requirement.txt'
            }
        }

        stage('Run tests') {
            steps {
                script {
                    // Debugging statements
                    echo "Selected TAGS value: ${params.TAGS}"
                    echo "Parameters - Name: ${params.Nametag}, Domain: ${params.Domain}, TAGS: ${params.TAGS}"

                    // Trim and use tagsOption if needed
                    def tagsOption = params.TAGS ? params.TAGS.trim() : ''
                    
                    // Run Robot Framework command with selected tags
                    if (tagsOption) {
                        sh "./venv/bin/robot --outputdir results --include ${tagsOption} tests/login/login.robot"
                    } else {
                        sh "./venv/bin/robot --outputdir results tests/login/login.robot"
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                sh 'rm -f geckodriver-*.log'
            }
        }
    }
    
    post {
        success {
            echo 'Tests passed - deployment can proceed'
        }
        
        failure {
            echo 'Tests failed - deployment halted'
        }
        
        always {
            sh 'rm -rf venv'
        }
    }
}
