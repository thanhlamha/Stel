pipeline {
    agent any

    environment {
        PATH = "D:\\chromedriver-win64\\chromedriver-win64;%PATH%;C:\\Users\\STEL\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;${env.PATH}"
    }

    stages {
        stage('Checkout dev repo and start server') {
            steps {
                // Checkout the dev repository
                script {
                    def repoDir = checkout scm
                    // 'repoDir' will contain the path to the cloned repository
                    echo "Path to dev repo: ${repoDir}"
                    
                    // Navigate to the repository directory
                    dir(repoDir) {
                        // Install dependencies and start server using npm
                        bat 'npm start'  // Adjust as per your npm start command
                    }
                }
            }
        }

        stage('Checkout test repo and run tests') {
            steps {
                // Checkout the test repository
                script {
                    def testRepoDir = checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '7310a3eb-f60e-4df0-8819-49b444ae99e5', url: 'https://github.com/thanhlamha/Stel.git']]])
                    
                    // 'testRepoDir' will contain the path to the cloned test repository
                    echo "Path to test repo: ${testRepoDir}"
                    
                    // Navigate to the repository directory
                    dir(testRepoDir) {
                        // Run tests using Robot Framework or other testing framework
                        script {
                            def selectedTestCases = params.TAGS.split(',')
                            def includeOptions = selectedTestCases.collect { "--include ${it}" }.join(' ')
                            def excludeOptions = "--exclude BLOCK-* --exclude FixAT"
                            bat "robot --outputdir results ${includeOptions} ${excludeOptions} tests\\"
                        }
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                echo 'Cleaning up after tests'
                // Add any cleanup steps if necessary
            }
        }
    }

    post {
        success {
            echo 'Tests passed - deployment can proceed'
        }
        failure {
            echo 'Tests failed - deployment halted'
        }
        always {
            echo 'Pipeline completed'
        }
    }
}
