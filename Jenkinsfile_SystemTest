pipeline {
    agent any

    environment {
        PATH = "C:\\Program Files\\nodejs\\;D:\\chromedriver-win64\\chromedriver-win64;%PATH%;C:\\Users\\STEL\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;${env.PATH}"
    }

    stages {
        stage('Checkout dev repo and start server') {
            steps {
                // Clone the dev repository from GitLab
                dir('dev_repo') {
                    checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '9a0003e4-8da5-4a72-ab68-bdad98022144', url: 'https://gitlab.com/thanhlamha/login-app-react-hooks.git']]])

                    // Install dependencies and start server
                    bat 'npm install'
                    bat 'start /B npm start'
                }
            }
        }

        stage('Checkout test repo') {
            steps {
                // Clone the test repository from GitHub
                dir('test_repo') {
                    checkout([$class: 'GitSCM', branches: [[name: 'main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '7310a3eb-f60e-4df0-8819-49b444ae99e5', url: 'https://github.com/thanhlamha/Stel.git']]])
                }
            }
        }

        stage('Run tests') {
            steps {
                script {
                    // Get the selected test cases
                    def selectedTestCases = params.TAGS.split(',')
                    def includeOptions = selectedTestCases.collect { "--include ${it}" }.join(' ')
                    def excludeOptions = "--exclude BLOCK-* --exclude FixAT"
                    def robotCommand = "robot --outputdir results ${includeOptions} ${excludeOptions} tests\\"
                    echo "Running command: ${robotCommand}"
                    bat robotCommand
                }
            }
        }

        stage('Cleanup') {
            steps {
                echo 'Cleaning up after tests'
                // Remove dev_repo directory if it exists
                script {
                    if (fileExists('dev_repo')) {
                        echo 'Deleting dev_repo directory'
                        deleteDir(path: 'dev_repo')
                    } else {
                        echo 'dev_repo directory does not exist'
                    }

                    // Remove test_repo directory if it exists
                    if (fileExists('test_repo')) {
                        echo 'Deleting test_repo directory'
                        deleteDir(path: 'test_repo')
                    } else {
                        echo 'test_repo directory does not exist'
                    }
                }

                // Add any additional cleanup steps if necessary, such as deleting temporary files
                // For example, if there are temporary files or directories created during the pipeline run
                script {
                    def tempDirs = ['results', 'node_modules']
                    tempDirs.each { dir ->
                        if (fileExists(dir)) {
                            echo "Deleting ${dir} directory"
                            deleteDir(path: dir)
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed'

        }

        failure {
            echo 'Pipeline completed'

        }

        always {
            echo 'Pipeline completed'
            
            // Cleanup after pipeline run
            script {
                // Reset environment variables if needed
                env.PATH = "${env.PATH_DEFAULT}"

                // Additional cleanup
                def workspaceDirs = ['dev_repo', 'test_repo', 'results', 'node_modules']
                workspaceDirs.each { dir ->
                    if (fileExists(dir)) {
                        echo "Deleting ${dir} directory in post section"
                        deleteDir(path: dir)
                    }
                }
            }
        }
    }
}
